/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'antlr'
}

def generatedSources = [
    rootDir: 'build/generated/',
    javaDir: 'build/generated/sources/annotationProcessor/java/main',
    testDir: 'build/generated/sources/annotationProcessor/java/test'
]

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir generatedSources.javaDir
        }
    }
}

dependencies {
    antlr 'org.antlr:antlr4:4.13.2'
    implementation 'org.antlr:antlr4-runtime:4.13.2'

    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'me.dstet.delphi.Delphi'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

run {
    standardInput = System.in
}

generateGrammarSource {
    arguments += ['-visitor', '-listener', '-long-messages', '-package', 'me.dstet.delphi']
    outputDirectory = file(generatedSources.javaDir)    
}

compileJava.dependsOn generateGrammarSource

clean {
    delete generatedSources.rootDir
}